<?php

/**
 * SamplePlugin functions
 *
 * @description Functions to support a sample user plugin
 * @author      Bill Zimmerman <billzimmerman@gmail.com>
 * @license     https://github.com/RaspAP/SamplePlugin/blob/master/LICENSE
 */

namespace SamplePlugin;

use RaspAP\Plugins\PluginManager;

/**
 * Handles a page action by rendering a plugin template
 *
 * @param string $page the current page route
 * @param PluginManager $pluginManager an instance of the PluginManager
 */
function handlePageAction(string $page, PluginManager $pluginManager, $pluginName)
{
    // Instantiate StatusMessage object
    $status = new \RaspAP\Messages\StatusMessage;

    // Populate template data
    $__template_data = [
        'title' => _('Sample Plugin'),
        'description' => _('A sample user plugin to extend RaspAP'),
        'author' => _('A. Plugin Author'),
        'icon' => 'fas fa-plug', // icon should be the same used for Sidebar
        'serviceStatus' => 'up', // plugin may optionally return a service status
        'serviceName' => 'sample.service', // an optional service name
        'pluginName' => $pluginName, // expected by Plugin Manager, do not edit
        'action' => 'plugin__'.$pluginName, // expected by Plugin Manager, do not edit
        // content may be passed in template data or used directly in the parent template and/or child tabs
        'content' => _('This is content generated by the SamplePlugin.'),
        // example service log output. this could be replaced with an actual status result such as:
        // exec("sudo systemctl status sample.service", $output, $return);
        'serviceLog' => "● sample.service - raspap-sample\n    Loaded: loaded (/lib/systemd/system/sample.service; enabled;)\n    Active: active (running)"
    ];

    /**
     * Examples of common plugin actions are handled here:
     * 1. saveSettings
     * 2. startSampleService
     * 3. stopSampleService
     *
     * Other page actions and custom functions may be added as required.
     */
    if (!RASPI_MONITOR_ENABLED) {
        if (isset($_POST['saveSettings'])) {
            if (isset($_POST['txtapikey'])) {
                // Validate user data
                $apiKey = trim($_POST['txtapikey']);
                if (strlen($apiKey) == 0) {
                    $status->addMessage('Please enter a valid API key', 'danger');
                } else {
                    $return = saveSampleSettings($status, $apiKey);
                    $status->addMessage('Restarting sample.service', 'info');
                    // Here you could restart a service, for example:
                    // exec('sudo /bin/systemctl restart sample.service', $return);
                    // Note: the www-user must have execute permissions in raspap.sudoers
                }
            }
        } elseif (isset($_POST['startSampleService'])) {
            $status->addMessage('Attempting to start sample.service', 'info');
            // Example of starting a service with exec():
            // exec('sudo /bin/systemctl start sample.service', $return);
            // Note: the www-user must have execute permissions in raspap.sudoers
            foreach ($return as $line) { // collect any returned values and add them to the StatusMessage object
                $status->addMessage($line, 'info');
            }
        } elseif (isset($_POST['stopSampleService'])) {
            $status->addMessage('Attempting to stop sample.service', 'info');
            // Example of stopping a a service with exec():
            // exec('sudo /bin/systemctl stop sample.service', $return);
            // Note: the www-user must have execute permissions in raspap.sudoers
            foreach ($return as $line) {
                $status->addMessage($line, 'info'); // collect any returned values and add them to the StatusMessage object
            }
        }
    }

    // pass apiKey to template data after processing page actions
    $__template_data['apiKey'] = $_SESSION['apiKey'];

    /**
     * Render the template and output it
     * @param string $pluginName
     * @param string $templateName should match the parent template in /plugins/SamplePlugin/templates
     * @param array $__template_data and any other variables passed to the template renderer
     */
    echo $pluginManager->renderTemplate($pluginName, 'sample', compact(
        "status",
        "__template_data"
    ));
}

/**
 * Saves SamplePlugin settings
 *
 * @param object status
 * @param string $apiKey
 */
function saveSampleSettings($status, $apiKey)
{
    $status->addMessage('Saving Sample API key', 'info');
    // do something with the API key, save to session for demo purposes
    $_SESSION['apiKey'] = $apiKey;
    return $status;
}

